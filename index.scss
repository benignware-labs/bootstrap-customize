// scss-docs-start import-stack
// Configuration
@import "~bootstrap/scss/_functions.scss";
@import "~bootstrap/scss/_variables.scss";

@import "~bootstrap/scss/_maps.scss";
@import "~bootstrap/scss/_mixins.scss";
@import "~bootstrap/scss/_utilities.scss";


:root, [data-bs-theme=light] {
  --#{$prefix}link-color: var(--#{$prefix}primary);
  --#{$prefix}focus-ring-color: rgba(from var(--#{$prefix}primary) r g b / var(--#{$prefix}focus-ring-opacity, $focus-ring-opacity));
  
  // Colors
  @each $name, $value in $theme-colors {
    $text-emphasis: color-mix(in srgb, var(--#{$prefix}#{$name}), $color-contrast-dark 60%);
    @if ($name == 'light' or $name == 'dark') {
      $text-emphasis: var(--#{$prefix}gray-700, $gray-700);
    }
    --#{$prefix}#{$name}-text-emphasis: #{$text-emphasis};
  }

  @each $name, $value in $theme-colors {
    $bg-subtle: color-mix(in srgb, var(--#{$prefix}#{$name}), $color-contrast-light 80%);
    
    @if ($name == 'light') {
      $bg-subtle: color-mix(in srgb, var(--#{$prefix}gray-100, $gray-100), var(--#{$prefix}white, $white));
    } @else if ($name == 'dark') {
      $bg-subtle: var(--#{$prefix}gray-400, $gray-400);
    }

    --#{$prefix}#{$name}-bg-subtle: #{$bg-subtle};
  }

  @each $name, $value in $theme-colors {
    $border-subtle: color-mix(in srgb, var(--#{$prefix}#{$name}), $color-contrast-dark 60%);
    
    @if ($name == 'light') {
      $border-subtle: var(--#{$prefix}gray-200, $gray-200);
    } @else if ($name == 'dark') {
      $border-subtle: var(--#{$prefix}gray-500, $gray-500);
    }

    --#{$prefix}#{$name}-border-subtle: #{$border-subtle};
  }
}

[data-bs-theme=dark] {
  // Colors
  @each $name, $value in $theme-colors {
    $text-emphasis: color-mix(in srgb, var(--#{$prefix}#{$name}), $color-contrast-light 40%);
    
    @if ($name == 'light') {
      $text-emphasis: var(--#{$prefix}gray-100, $gray-100);
    } @else if ($name == 'dark') {
      $text-emphasis: var(--#{$prefix}gray-300, $gray-300);
    }

    --#{$prefix}#{$name}-text-emphasis: #{$text-emphasis};
  }

  @each $name, $value in $theme-colors {
    $bg-subtle: color-mix(in srgb, var(--#{$prefix}#{$name}), $color-contrast-dark 80%);
    
    @if ($name == 'light') {
      $bg-subtle: var(--#{$prefix}gray-800, $gray-800);
    } @else if ($name == 'dark') {
      $bg-subtle: color-mix(in srgb, var(--#{$prefix}gray-800, $gray-800), var(--#{$prefix}black, $black));
    }

    --#{$prefix}#{$name}-bg-subtle: #{$bg-subtle};
  }

  @each $name, $value in $theme-colors {
    $border-subtle: color-mix(in srgb, var(--#{$prefix}#{$name}), $color-contrast-light 40%);
    
    @if ($name == 'light') {
      $border-subtle: var(--#{$prefix}gray-700, $gray-700);
    } @else if ($name == 'dark') {
      $border-subtle: var(--#{$prefix}gray-800, $gray-800);
    }

    --#{$prefix}#{$name}-border-subtle: #{$border-subtle};
  }
}

// Links
// body a:not[class*="btn"]:not[class*="button"]:not([role="button"]) {
a {
  $link-color-base: var(--#{$prefix}link-color, $link-color);
  $link-color: rgba(from #{$link-color-base} r g b / var(--#{$prefix}link-opacity, 1));
  $link-color-contrast: colorContrast($link-color-base, $color-contrast-dark, $color-contrast-light);
  $link-hover-color-base: color-mix(in srgb, $link-color-contrast $link-shade-percentage, $link-color-base);
  $link-hover-color: rgba(from $link-hover-color-base r g b / var(--#{$prefix}link-hover-opacity, 1));
  color: var(--#{$prefix}link-color, var(--#{$prefix}primary, $link-color));

  &:hover {
    color: $link-hover-color;
  }
}

@each $name, $value in $theme-colors {
  .text-#{$name} {
    $color: rgba(from var(--#{$prefix}#{$name}, $value) r g b / var(--#{$prefix}text-opacity, 1));
    color: $color !important;
  }

  .link-underline-#{$name},
  .link-#{$name} {
    $link-color-base: var(--#{$prefix}#{$name}, $value);
    $link-color: rgba(from #{$link-color-base} r g b / var(--#{$prefix}link-underline-opacity, 1));
    $link-color-contrast: colorContrast($link-color-base, $color-contrast-dark, $color-contrast-light);
    $link-hover-color-base: color-mix(in srgb, $link-color-contrast $link-shade-percentage, $link-color-base);
    $link-hover-color: rgba(from $link-hover-color-base r g b / var(--#{$prefix}link-underline-hover-opacity, 1));
    
    text-decoration-color: $link-color !important;

    &:hover {
      text-decoration-color: $link-hover-color !important;
    }
  }

  .link-#{$name} {
    $link-color-base: var(--#{$prefix}#{$name}, $value);
    $link-color: rgba(from #{$link-color-base} r g b / var(--#{$prefix}link-opacity, 1));
    $link-color-contrast: colorContrast($link-color-base, $color-contrast-dark, $color-contrast-light);
    $link-hover-color-base: color-mix(in srgb, $link-color-contrast $link-shade-percentage, $link-color-base);
    $link-hover-color: rgba(from $link-hover-color-base r g b / var(--#{$prefix}link-hover-opacity, 1));
    color: $link-color !important;

    &:hover {
      color: $link-hover-color !important;
    }
  }

  .bg-#{$name},
  .text-bg-#{$name} {
    $background-base: var(--#{$prefix}#{$name}, $value);
    $background: rgba(from $background-base r g b / var(--#{$prefix}bg-opacity, 1));
    background-color: $background !important;
  }

  .bg-#{$name},
  .text-bg-#{$name} {
    $background-base: var(--#{$prefix}#{$name}, $value);
    $background: rgba(from $background-base r g b / var(--#{$prefix}bg-opacity, 1));
    $color: colorContrast($background-base, $color-contrast-dark, $color-contrast-light);
    color: $color;
  }

  .border-#{$name} {
    $border: rgba(from var(--#{$prefix}#{$name}, $value) r g b / var(--#{$prefix}border-opacity, 1));
    border-color: $border !important;
  }
}

.bg-body-secondary {
  background-color: rgba(from var(--#{$prefix}secondary-bg, $body-secondary-bg) r g b / var(--#{$prefix}bg-opacity, 1)) !important;
}

.bg-body-tertiary {
  background-color: rgba(from var(--#{$prefix}tertiary-bg, $body-tertiary-bg) r g b / var(--#{$prefix}bg-opacity, 1)) !important;
}

// Buttons
@each $name, $value in $theme-colors {
  .btn-#{$name} {
    $background: var(--#{$prefix}#{$name});
    $border: $background;
    $contrast: colorContrast($background, $color-contrast-dark, $color-contrast-light);
    $anti-contrast: colorContrast($contrast, $color-contrast-light, $color-contrast-dark);
    $hover-background: color-mix(in srgb, $background, $anti-contrast $btn-hover-bg-shade-amount);
    $hover-color: colorContrast($hover-background, $color-contrast-dark, $color-contrast-light);
    $hover-border: color-mix(in srgb, $background, $anti-contrast $btn-hover-border-shade-amount);
    $active-background: color-mix(in srgb, $background, $anti-contrast $btn-active-bg-shade-amount);
    $active-border: color-mix(in srgb, $background, $anti-contrast $btn-active-border-shade-amount);
    $active-color: colorContrast($active-background, $color-contrast-dark, $color-contrast-light);
    $disabled-background: $background;
    $disabled-border: $border;
    $disabled-color: colorContrast($disabled-background, $color-contrast-dark, $color-contrast-light);

    $btn-focus-shadow: color-mix(in srgb, $background 50%, $border 50%);

    --#{$prefix}btn-color: #{$contrast};
    --#{$prefix}btn-bg: #{$background};
    --#{$prefix}btn-border-color: #{$border};
    --#{$prefix}btn-hover-color: #{$hover-color};
    --#{$prefix}btn-hover-bg: #{$hover-background};
    --#{$prefix}btn-hover-border-color: #{$hover-border};
    // --#{$prefix}btn-focus-shadow-rgb: #{to-rgb(mix($color, $border, 15%))};
    --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} rgba(from #{$btn-focus-shadow} r g b / .5);
    --#{$prefix}btn-active-color: #{$active-color};
    --#{$prefix}btn-active-bg: #{$active-background};
    --#{$prefix}btn-active-border-color: #{$active-border};
    // --#{$prefix}btn-active-shadow: #{$btn-active-box-shadow};
    --#{$prefix}btn-disabled-color: #{$disabled-color};
    --#{$prefix}btn-disabled-bg: #{$disabled-background};
    --#{$prefix}btn-disabled-border-color: #{$disabled-border};
  }

  .btn-outline-#{$name} {
    $color: var(--#{$prefix}#{$name});
    $color-hover: colorContrast($color, $color-contrast-dark, $color-contrast-light);
    $active-background: $color;
    $active-border: $color;
    $active-color: colorContrast($active-background, $color-contrast-dark, $color-contrast-light);

    --#{$prefix}btn-color: #{$color};
    --#{$prefix}btn-border-color: #{$color};
    --#{$prefix}btn-hover-color: #{$color-hover};
    --#{$prefix}btn-hover-bg: #{$active-background};
    --#{$prefix}btn-hover-border-color: #{$active-border};
    // --#{$prefix}btn-focus-shadow-rgb: #{to-rgb($color)};
    --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} rgba(from $color r g b / .5);
    --#{$prefix}btn-active-color: #{$active-color};
    --#{$prefix}btn-active-bg: #{$active-background};
    --#{$prefix}btn-active-border-color: #{$active-border};
    // --#{$prefix}btn-active-shadow: #{$btn-active-box-shadow};
    --#{$prefix}btn-disabled-color: #{$color};
    --#{$prefix}btn-disabled-bg: transparent;
    --#{$prefix}btn-disabled-border-color: #{$color};
    --#{$prefix}gradient: none;
  }
}

.form-control,
.form-select {
  &:focus {
    $focus-ring-color: rgba(from var(--#{$prefix}primary) r g b / #{$focus-ring-opacity});
    $focus-ring-box-shadow: 0 0 $focus-ring-blur $focus-ring-width $focus-ring-color;
    box-shadow: $focus-ring-box-shadow;
    border-color: $focus-ring-color;
  }
}

.form-check-input,
.form-range {
  $focus-ring-color: rgba(from var(--#{$prefix}primary) r g b / #{$focus-ring-opacity});
  $focus-ring-box-shadow: 0 0 $focus-ring-blur $focus-ring-width $focus-ring-color;

  &:focus {
    box-shadow: $focus-ring-box-shadow;
  }
}

.form-check-input {
  &:focus {
    border-color: var(--#{$prefix}primary);
    outline: 0;
  }

  &:checked {
    background-color: var(--#{$prefix}primary, #{$form-check-input-checked-bg-color});
    border-color: var(--#{$prefix}primary, #{$form-check-input-checked-border-color});
  }
}

.form-range {
  $thumb-bg: var(--#{$prefix}primary, $form-range-thumb-bg);
  $thumb-color: colorContrast($thumb-bg, $color-contrast-dark, $color-contrast-light);
  $thumb-active-bg: color-mix(in srgb, $thumb-bg 70%, $thumb-color);

  $focus-ring-color: rgba(from var(--#{$prefix}primary) r g b / #{$focus-ring-opacity});
  $focus-ring-box-shadow: 0 0 $focus-ring-blur $focus-ring-width $focus-ring-color;

  &:focus {
    outline: 0;

    &::-webkit-slider-thumb { box-shadow: $focus-ring-box-shadow; }
    &::-moz-range-thumb     { box-shadow: $focus-ring-box-shadow; }
  }
  
  &::-webkit-slider-thumb {
    background: $thumb-bg;
  
    &:active {
      background: $thumb-active-bg;
    }
  }

  &::-moz-range-thumb {
    background: $thumb-bg;
  
    &:active {
      background: $thumb-active-bg;
    }
  }
}


.accordion {
  --bs-accordion-btn-focus-box-shadow: 0 0 0 $accordion-btn-focus-width rgba(from var(--#{$prefix}primary) r g b / .25);
}
